Complexity Classes: P, NP, NP-Hard, and NP-Complete

In computer science, computational complexity theory is used to classify problems based on how difficult they are to solve and verify. 

The four important complexity classes are P, NP, NP-Hard, and NP-Complete.

1. P (Polynomial Time)

Definition: The class of problems that can be solved efficiently (in polynomial time) by a deterministic Turing machine.

Mathematically: If there exists an algorithm that solves the problem in O(n^k) time for some constant k, the problem belongs to P.

Example Problems:
Sorting numbers (Merge Sort, Quick Sort → O(n log n))
Finding the shortest path in a graph (Dijkstra’s Algorithm → O(V²))
Checking if a number is prime (AKS primality test → O(n⁶))


2. NP (Nondeterministic Polynomial Time)

Definition: The class of problems for which a given solution can be verified in polynomial time by a deterministic Turing machine.

Key Idea: Even if finding a solution may be hard, checking if a given solution is correct is easy.

Example Problems:
Sudoku puzzle verification (Given a completed board, checking if it's correct is easy → O(n²))
Traveling Salesman Problem (TSP) (Checking if a given route is optimal is easy)
Boolean Satisfiability Problem (SAT) (Given a set of variable assignments, checking if a formula is satisfied is polynomial)

3. NP-Hard (Nondeterministic Polynomial-Time Hard)

Definition: The class of problems that are at least as hard as the hardest problems in NP.

Key Idea:
An NP-Hard problem doesn’t have to be in NP.
It may be even harder than NP problems (e.g., it may not even be verifiable in polynomial time).
Every NP problem can be reduced to a NP-hard problem.
(hence: if a NP-hard problem can be solved polynomially, every NP problem becomes P)

Example Problems:
Halting Problem (Given a program and an input, determine if the program will eventually halt or run forever → Undecidable)
Traveling Salesman Problem (Optimization version) (Finding the shortest route among all possible routes)
Chess (General case) (Deciding whether White has a winning strategy from a given board position)


4. NP-Complete

Definition: The class of problems that are both in NP and NP-Hard.

Key Idea:
The hardest problems in NP.
If any NP-Complete problem can be solved in polynomial time, then all NP problems can be solved in polynomial time (i.e., P = NP).

How to Prove a Problem is NP-Complete:

Show that it is in NP (i.e., a solution can be verified in polynomial time).
Show that it is NP-Hard (by reducing 
i. all NP problems to it or 
ii. a known NP-Complete problem to it in polynomial time (as all NP problems are reducible to it)
).

Example Problems:

Boolean Satisfiability Problem (SAT) (Given a boolean formula, is there an assignment of variables that makes it true?)
Traveling Salesman Decision Problem (TSP Decision Version) (Given a set of cities and a distance limit k, is there a route shorter than k?)
Knapsack Problem (Can a subset of items fit into a knapsack without exceeding weight limits?)
Hierarchy of Complexity Classes

P ⊆ NP
NP-Complete ⊆ NP-Hard
NP-Complete ⊆ NP

All P problems are in NP (since they can be solved and verified in polynomial time).

NP-Complete problems are the hardest problems in NP.

NP-Hard problems may or may not be in NP.